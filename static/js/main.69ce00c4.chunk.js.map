{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.module.css","assets/img/avatar1.png","assets/preloader.gif","components/Profile/ProfileInfo/wpapers.jpg","components/Profile/MyPosts/Post/post.module.css","components/Navbar/Navbar.module.css","components/Navbar/Navbar.tsx","components/Navbar/Music/Music.tsx","components/Navbar/News/News.tsx","components/Navbar/Settings/Settings.jsx","Api/Api.tsx","Redux/users_reducer.ts","components/Users/Users.tsx","components/common/Preloader/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profile_reducer.ts","components/Profile/MyPosts/Post/post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","HOC/WithAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","Redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","Redux/dialogs_reducer.ts","components/Dialogs/DialogItem/DialohItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","App.tsx","serviceWorker.js","Redux/sidebar_reducer.ts","Redux/redux-store.ts","index.tsx"],"names":["module","exports","NavBar","className","s","nav","item","to","activeClassName","activeLink","active","Music","props","News","Settings","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","id","delete","post","userId","authApi","initialState","users","totalUsersCount","isFetching","followingInProgress","toggleIsFetching","type","toggleFollowingInProgress","isFetch","Users","pagesCount","Math","ceil","pages","i","push","map","p","selectedPage","onClick","onPageChanged","usersPage","u","key","avatar","src","photos","small","avatar1","followed","disabled","some","unFollow","follow","name","status","Preloader","loading","UsersContainer","pageNumber","getUsers","this","React","Component","connect","state","dispatch","then","response","data","resultCode","acceptFollow","acceptUnFollow","setCurrentPage","items","count","totalCount","ProfileInfo","image","road","descriptionBlock","profile","large","posts","message","howManyLikes","newPostText","Post","MyPosts","postElements","profilePage","postBlock","value","onChange","e","currentTarget","addNewPostText","addPostCallback","MyPostsContainer","newText","Profile","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","RedirectComponent","AuthRedirectComponent","Number","match","params","getProfile","WithUrlDataContainerComponent","withRouter","Header","header","loginBlock","login","email","HeaderContainer","setAuthUserData","Login","messages","newMessageText","dialogs","img","DialogItem","path","dialog","MessageItem","dialogsElements","dialogsPage","d","messageElements","m","dialogItems","onNewMessageChange","placeholder","onSendMessageClick","DialogsContainer","messageBody","addNewMessageText","App","component","render","Boolean","window","location","hostname","friends","reducers","combineReducers","action","newPost","sidebar","filter","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.69ce00c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__xFR2T\",\"dialog\":\"Dialogs_dialog__3YZMl\",\"message\":\"Dialogs_message__YR3GF\",\"messages\":\"Dialogs_messages__15RF7\",\"dialogItems\":\"Dialogs_dialogItems__1Hjf9\",\"active\":\"Dialogs_active__2z4cT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__UXf7B\",\"postBlock\":\"MyPosts_postBlock__1kfNr\",\"posts\":\"MyPosts_posts__nqRn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__3rKsv\",\"selectedPage\":\"Users_selectedPage__3jfWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Z3h2x\",\"image\":\"ProfileInfo_image__1MsHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2tyyt\",\"loginBlock\":\"Header_loginBlock__1OQkB\"};","module.exports = __webpack_public_path__ + \"static/media/avatar1.498d600c.png\";","module.exports = __webpack_public_path__ + \"static/media/preloader.0ad6a0ce.gif\";","module.exports = __webpack_public_path__ + \"static/media/wpapers.a1b97f4f.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__3KsPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__8_Igp\",\"item\":\"Navbar_item__ulGPc\",\"activeLink\":\"Navbar_activeLink__2OwnW\"};","import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport s from './Music.module.css';\r\ntype MusicType={\r\n\r\n}\r\nconst Music=(props: MusicType)=>{\r\n    return(\r\n        <div className={s.Music}>Music</div>\r\n    )\r\n}\r\nexport default Music;","import React from \"react\";\r\n\r\nconst News=(props: any)=>{\r\n    return(\r\n        <div>News</div>\r\n    )\r\n}\r\nexport default News;","import React from \"react\";\r\n\r\nconst Settings=(props)=>{\r\n    return(\r\n        <div>Settings</div>\r\n    )\r\n}\r\nexport default Settings;\r\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n    headers: {\r\n        \"API-KEY\": \"f86ed128-1eb6-4390-9695-099af06721b7\"\r\n    }\r\n});\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n    },\r\n\r\n    unFollow(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n    },\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    }\r\n}\r\nexport const authApi = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    }\r\n}","import {ActionsTypes} from \"./redux-store\";\r\nimport {usersAPI} from \"../Api/Api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING'\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE-IS-FOLLOWING-PROGRESS'\r\n\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotosType\r\n    status: string\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\nlet initialState: UsersPageType = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: []\r\n}\r\nexport const usersReducers = (state: UsersPageType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetch\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const acceptFollow = (userId: number) => {\r\n    return {type: FOLLOW, userId} as const\r\n}\r\nexport const acceptUnFollow = (userId: number) => {\r\n    return {type: UNFOLLOW, userId} as const\r\n}\r\nexport const setUsers = (users: Array<UsersType>) => {\r\n    return {type: SET_USERS, users} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {type: SET_TOTAL_USERS_COUNT, count: totalUsersCount} as const\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {type: TOGGLE_IS_FETCHING, isFetching} as const\r\n}\r\nexport const toggleFollowingInProgress = (isFetch: boolean, userId: number) => {\r\n    return {type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetch, userId} as const\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        usersAPI.getUsers(currentPage, pageSize).then(response => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(response.data.items))\r\n            dispatch(setTotalUsersCount(response.data.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nexport const follow=(userId: number)=> {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(acceptFollow(userId))\r\n                }\r\n                dispatch(toggleFollowingInProgress(false, userId))\r\n            });\r\n    }\r\n}\r\n\r\nexport const unFollow=(userId: number)=>{\r\n    return (dispatch: Dispatch) =>{\r\n        dispatch(toggleFollowingInProgress(true, userId))\r\n        usersAPI.unFollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(acceptUnFollow(userId))\r\n                }\r\n                dispatch(toggleFollowingInProgress(false,userId))\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport avatar1 from \"../../assets/img/avatar1.png\";\r\nimport {UsersType} from \"../../Redux/users_reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unFollow: (userId: number) => void,\r\n    usersPage: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\nlet Users = (props: UsersPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? s.selectedPage : ''}\r\n                             onClick={() => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.usersPage.map(u => {\r\n                return (\r\n                    <div key={u.id}>\r\n               <span>\r\n                   <div>\r\n                       <NavLink to={'/profile/' + u.id}>\r\n                           <img className={s.avatar} src={u.photos.small != null ? u.photos.small : avatar1}/>\r\n                  </NavLink>\r\n                   </div>\r\n                   <div>\r\n                       {u.followed\r\n                           ? <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                               props.unFollow(u.id)\r\n                           }}>Unfollow</button>\r\n                           : <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                               props.follow(u.id)\r\n                           }}>Follow</button>}\r\n                   </div>\r\n               </span>\r\n                        <span>\r\n                   <span>\r\n                       <div>{u.name}</div><div>{u.status}</div>\r\n                   </span>\r\n                   <span>\r\n                        <div>{\"location.country\"}</div>\r\n                       <div>{\"location.city\"}</div>\r\n                   </span>\r\n               </span>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n    </div>\r\n}\r\nexport default Users;","import loading from '../../../assets/preloader.gif'\r\n\r\nimport React from \"react\";\r\nexport type LoadingType={\r\nloading: string\r\n}\r\nlet Preloader=(props:LoadingType)=>{\r\n    return    <img src={props.loading}/>\r\n}\r\nexport default Preloader","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {follow, getUsers, setCurrentPage, unFollow, UsersType} from \"../../Redux/users_reducer\";\r\nimport Users from \"./Users\";\r\nimport loading from '../../assets/preloader.gif'\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n/*type ResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: null\r\n}*/\r\n\r\nexport type UsersContainerPropsType = OwnPropsType & MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype OwnPropsType = {}\r\n\r\ntype MapStateToPropsType = {\r\n    usersPage: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unFollow: (userId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport class UsersContainer extends React.Component<UsersContainerPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader loading={loading}/> : null}\r\n            <Users\r\n                follow={this.props.follow}\r\n                unFollow={this.props.unFollow}\r\n                usersPage={this.props.usersPage}\r\n                pageSize={this.props.pageSize}\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersPage: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching,\r\n        followingInProgress: state.usersPage.followingInProgress\r\n    }\r\n}\r\n\r\n/*let mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unFollow: (userId: number) => {\r\n            dispatch(unFollowAC(userId))\r\n        },\r\n        setUsers: (users: Array<UsersType>) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber: number) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount: number) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        },\r\n        toggleIsFetching: (isFetching: boolean) => {\r\n\r\n            dispatch(toggleIsFetchingAC(isFetching))\r\n        },\r\n        toggleFollowingInProgress: (isFetch: boolean, userId: number) => {\r\n\r\n            dispatch(toggleFollowingInProgress(isFetch,userId))\r\n        }\r\n\r\n    }\r\n}*/\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n    follow, unFollow, setCurrentPage, getUsers\r\n})(UsersContainer)","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport road from './wpapers.jpg'\r\nimport {ProfileType} from \"../../../Redux/profile_reducer\";\r\n\r\nexport type ProfileInfoPropsType={\r\n    profile:ProfileType | null\r\n}\r\n\r\nconst ProfileInfo =(props:ProfileInfoPropsType)=> {\r\n\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <div className={s.image}>\r\n                <img src={road}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile?.photos.large}/>\r\n                ava+description\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default ProfileInfo;","import {ActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../Api/Api\";\r\n\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nconst SET_USER_PROFILE = 'SET-USER-PROFILE';\r\n\r\nexport type ContactsType = {\r\n    facebook: string\r\n    website: string\r\n    vk: string\r\n    instagram: string\r\n    youtube: string\r\n    github: string\r\n    mainLink: string\r\n}\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    profile: ProfileType | null\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    howManyLikes: number\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', howManyLikes: 10},\r\n        {id: 2, message: 'It is my first post?', howManyLikes: 15}\r\n    ],\r\n    newPostText: 'New post',\r\n    profile: null\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostsType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                howManyLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        case  SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = () => {\r\n    return {\r\n        type: ADD_POST\r\n    } as const\r\n}\r\n\r\nexport const addNewPostText = (newText: string) => {\r\n    return {type: UPDATE_NEW_POST_TEXT, newText: newText} as const\r\n}\r\n\r\nexport const setUsersProfile = (profile: ProfileType) => {\r\n    return {type: SET_USER_PROFILE, profile} as const\r\n}\r\n\r\nexport const getProfile = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUsersProfile(response.data))\r\n            })\r\n    }\r\n}","import React from \"react\";\r\nimport s from './post.module.css'\r\nimport {PostsType} from \"../../../../Redux/profile_reducer\";\r\n\r\n\r\nconst Post = (props: PostsType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://vignette.wikia.nocookie.net/lisenot/images/2/25/.jpg/revision/latest/scale-to-width-down/340?cb=20150514143502&path-prefix=ru\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.howManyLikes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/post'\r\nimport {ProfilePageType} from \"../../../Redux/profile_reducer\";\r\n\r\n\r\ntype MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPostCallback: (postText: string) => void\r\n    addNewPostText: (newText: string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n    let postElements =\r\n        props.profilePage.posts.map(p => <Post id={p.id} message={p.message} howManyLikes={p.howManyLikes}/>)\r\n\r\n    const addPost = () => {\r\n        props.addPostCallback(props.profilePage.newPostText);\r\n    }\r\n    const newTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newPostText = e.currentTarget.value\r\n        props.addNewPostText(newPostText)\r\n    }\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <div className={s.nav}>\r\n            <div>\r\n                <textarea value={props.profilePage.newPostText}\r\n                          onChange={newTextChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button onClick={addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport {addNewPostText, addPost} from \"../../../Redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\nlet mapStateToProps=(state: AppStateType)=>{\r\n    return{\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps=(dispatch: Dispatch)=> {\r\n    return {\r\n        addPostCallback: () => {\r\n            dispatch(addPost())\r\n        },\r\n        addNewPostText: (newText: string) => {\r\n            dispatch(addNewPostText(newText));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/profile_reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <ProfileInfo profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any,any>{\r\n        render() {\r\n            if (!this.props.isAuth) return  <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, ProfileType} from \"../../Redux/profile_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter, Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n/*type ResponseType={\r\n    aboutMe:string\r\n    contacts: ContactsType\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription:string\r\n    fullName: string\r\n    userId: number\r\n    photos: PhotosType\r\n\r\n}*/\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getProfile:(userId:number)=>void\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = 2\r\n        }\r\n        this.props.getProfile(userId)\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return (\r\n\r\n            <div className='app-wrapper-content'>\r\n                <Profile {...this.props} profile={this.props.profile}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n/*compose(\r\n    connect(mapStateToProps, {getProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)*/\r\n\r\nlet AuthRedirectComponent=withAuthRedirect(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile\r\n\r\n})\r\nconst WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\nexport default connect(mapStateToProps, {getProfile})(WithUrlDataContainerComponent);\r\n","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype HeaderPropsType={\r\n    isAuth:boolean\r\n    login:string|null\r\n}\r\nconst Header =(props:HeaderPropsType)=> {\r\n\r\n  return  <header className={s.header}>\r\n        <img src='https://flosium.ru/imagehost/158/med_kak-razvivaetsya-cvetok-gerbery-v-domashnih-usloviyah.jpg'/>\r\n  <div className={s.loginBlock}>\r\n      {props.isAuth ? props.login:\r\n      <NavLink to={'/login'}>Login</NavLink>}\r\n  </div>\r\n  </header>\r\n}\r\nexport default Header;\r\n","import {ActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authApi} from \"../Api/Api\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\nexport type UserDataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n}\r\nexport type SetAuthUserDataType={\r\n    type: 'SET_USER_DATA'\r\n    data: UserDataType\r\n}\r\nexport type AuthPropsType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nlet initialState: AuthPropsType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\nexport const authReducers = (state: AuthPropsType = initialState, action: ActionsTypes):AuthPropsType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth:true\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number|null, email: string|null, login: string|null):SetAuthUserDataType => {\r\n    return {\r\n        type: SET_USER_DATA, data: {id, email, login}\r\n    } as const\r\n}\r\n\r\nexport const auth=()=>{\r\n    return (dispatch: Dispatch)=>{\r\n\r\n        authApi.me()\r\n            .then(response => {\r\n                if (response.data.resultCode===0){\r\n                    let {id,login, email}=response.data.data\r\n                    dispatch(setAuthUserData(id, login, email))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {auth} from \"../../Redux/auth-reducer\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth:boolean\r\n    login:string|null\r\n}\r\ntype MapDispatchToPropsType={\r\n    auth:()=>void\r\n}\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype PropsType=OwnPropsType\r\nclass HeaderContainer extends React.Component <PropsType>{\r\n    componentDidMount() {\r\n        this.props.auth()\r\n    }\r\n\r\n    render() {\r\n\r\n        return <Header {...this.props} isAuth={this.props.isAuth} login={this.props.login}/>\r\n    }\r\n}\r\nconst mapStateToProps=(state: AppStateType):MapStateToPropsType=>\r\n    ({isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    })\r\n\r\nexport default connect(mapStateToProps,{auth})(HeaderContainer);\r\n","import React from 'react'\r\n\r\nconst Login=(props: any)=>{\r\nreturn <h1>Login</h1>\r\n}\r\nexport default  Login","import {ActionsTypes} from \"./redux-store\";\r\n\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\n\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n    dialogs: Array<DialogsType>\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'What do you do'},\r\n        {id: 4, message: 'My dog is the best friend'},\r\n        {id: 5, message: 'The best day!'}\r\n\r\n    ],\r\n    newMessageText: '',\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Lera',\r\n            img: 'https://www.sb.by/upload/resize_cache/slam.image/iblock/558/558ebd06b5552debf362edd774b92920.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Sasha',\r\n            img: 'https://i.pinimg.com/originals/8e/b0/fd/8eb0fdac7230089db2fa51f53e53397e.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Kesha',\r\n            img: 'https://www.belanta.vet/vet-blog/wp-content/uploads/2018/08/bulterer_07.jpg'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Dasha',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSNdbepu0Mk7TjGMAibWXRBh5Zn1lXAWFLtVg&usqp=CAU'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Pasha',\r\n            img: 'https://cameralabs.org/images/jamp/page/d07d78d2fbbd361944e4a80341a9931b_L.jpg'\r\n        }\r\n    ]\r\n}\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes):DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {...state, newMessageText:action.messageBody}\r\n\r\n\r\n        case SEND_MESSAGE:\r\n            let messageBody = state.newMessageText;\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, {id: 6, message: messageBody}]\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let addNewMessageText = (messageBody: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        messageBody: messageBody\r\n    } as const\r\n}\r\n\r\nexport let addNewMessage = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType={\r\n    id: number\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props:DialogItemPropsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.img}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\ntype MessageItemType={\r\n    message:string\r\n}\r\n\r\nconst MessageItem = (props:MessageItemType) => {\r\n\r\n    return (\r\n\r\n            <div className={s.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n\r\n    )\r\n}\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport {addNewMessage, addNewMessageText} from \"../../Redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        onSendMessageClick: () => {\r\n            dispatch(addNewMessage())\r\n        },\r\n        onNewMessageChange: (messageBody: string) => {\r\n            dispatch(addNewMessageText(messageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)*/ //не могу понять как ее заюзать\r\nlet AuthRedirectComponent=withAuthRedirect(Dialogs)\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\nexport default DialogsContainer;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialohItem\";\r\nimport MessageItem from \"./Messages/Messages\";\r\nimport {DialogsPageType} from \"../../Redux/dialogs_reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype OneDialogsType = {\r\n    dialogsPage: DialogsPageType\r\n    onSendMessageClick: (newMessage: string) => void\r\n    onNewMessageChange: (messageBody: string) => void\r\n    isAuth:boolean\r\n}\r\n\r\nconst Dialogs = (props: OneDialogsType) => {\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} img={d.img}/>)\r\n    let messageElements =\r\n        props.dialogsPage.messages.map(m => <MessageItem message={m.message}/>)\r\n    let newMessageText =\r\n        props.dialogsPage.newMessageText;\r\n    let onSend = () => {\r\n        props.onSendMessageClick(props.dialogsPage.newMessageText)\r\n    }\r\n    let onNewChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onNewMessageChange(e.currentTarget.value)\r\n    }\r\n    if (props.isAuth===false)return <Redirect to={'/login'}/>\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageText}\r\n                                   onChange={onNewChange}\r\n                                   placeholder='Enter your message'>\r\n                    </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSend}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.messages}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from \"./components/Navbar/Navbar\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Music from \"./components/Navbar/Music/Music\";\nimport News from \"./components/Navbar/News/News\";\nimport Settings from \"./components/Navbar/Settings/Settings\";\n\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\n\n\nconst App = () => {\n\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <div className='navigation'>\n                    <NavBar/>\n                    {/*<Sidebar />*/}\n                </div>\n                <div className='app-wrapper-content'>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/settings' component={Settings}/>\n\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n            </div>\n        </BrowserRouter>)\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ActionsTypes} from \"./redux-store\";\r\n\r\nexport type FriendsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\nlet initialState = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: 'Lera',\r\n            img: 'https://hvost.news/upload/resize_cache/iblock/8b8/750_400_1/pochemu_kotenok_lizhet_volosy_i_zaryvaetsja_v_nih.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Nick',\r\n            img: 'https://irecommend.ru/sites/default/files/product-images/8170/x_1bfe8ccb.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Sasha',\r\n            img: 'https://cdn.iz.ru/sites/default/files/styles/1920x1080/public/article-2019-10/3_2.jpg?itok=490tTVov'\r\n        }\r\n    ],\r\n}\r\nexport const sidebarReducer = (state: SidebarType = initialState, action: ActionsTypes) => {\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore, Store} from \"redux\";\r\nimport {addNewPostText, addPost, profileReducer, setUsersProfile} from \"./profile_reducer\";\r\nimport {sidebarReducer} from \"./sidebar_reducer\";\r\nimport {addNewMessage, addNewMessageText, dialogsReducer} from \"./dialogs_reducer\";\r\nimport {\r\n    acceptFollow,\r\n    setCurrentPage,\r\n    setTotalUsersCount,\r\n    setUsers, toggleFollowingInProgress,\r\n    toggleIsFetching,\r\n    acceptUnFollow,\r\n    usersReducers\r\n} from \"./users_reducer\";\r\nimport {authReducers, setAuthUserData} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof addNewPostText>\r\n    | ReturnType<typeof setUsersProfile>\r\n    | ReturnType<typeof addNewMessage>\r\n    | ReturnType<typeof addNewMessageText>\r\n    | ReturnType<typeof acceptFollow>\r\n    | ReturnType<typeof acceptUnFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof toggleFollowingInProgress>\r\n\r\n\r\n\r\n/*export type StoreType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: SidebarType\r\n    usersPage: UsersPageType\r\n    getState: () => AppStateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: Dispatch\r\n    auth: AuthPropsType\r\n}*/\r\nlet reducers = combineReducers(\r\n    {\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        sidebar: sidebarReducer,\r\n        usersPage: usersReducers,\r\n        auth: authReducers\r\n    }\r\n);\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\nexport let store: Store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\ntype Window = typeof window & { store: Store }\r\n(window as Window).store = store;\r\nexport default store;","import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/redux-store\";\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider\n               store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}