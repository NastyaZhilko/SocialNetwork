{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/common/FormControls/FormControls.tsx","Utils/validators.ts","components/Login/Login.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","minLength2","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","style","formSummaryError","connect","state","isAuth","auth","captcha","login","to","formData","email","password","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,+LCQ5GC,EAAyC,SAAC,GAAsC,IAAD,IAApCC,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SACpEC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,6BACKC,GAEJC,GAAY,8BAAOF,KAMnBM,EAAwC,SAACC,GAAW,IACvDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD+C,YACzBS,EADyB,mBAE5D,OAAO,kBAACV,EAAgBU,EAAjB,KAA0B,8CAAcC,EAAWC,MAIjDC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD2C,YACrBS,EADqB,mBAEzD,OAAO,kBAACV,EAAgBU,EACpB,2CAAWC,EAAWC,MAIvB,SAASE,EAAyCC,EACAC,EACAC,EACAC,GACwB,IAAxBR,EAAuB,uDAAf,GAAIS,EAAW,uDAAJ,GACxE,OAAO,6BACH,kBAAC,IAAD,eAAOJ,YAAaA,EAAaC,KAAMA,EAChCI,SAAUH,EACVC,UAAWA,GACPR,IAJR,IAKCS,K,iCC3CZ,sGAAO,IAAME,EAA4B,SAACC,GACtC,IAAIA,EAEJ,MAAO,qBAGGC,EAAiB,SAACC,GAAD,OAAwC,SAACF,GACpE,GAAIA,GAASA,EAAMG,OAAOD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAK5BE,EAA8B,SAACJ,GACxC,GAAIA,GAASA,EAAMG,OAAO,EAAG,MAAO,4B,iCCfxC,uGAqDME,EAAiBC,YAA2C,CAACC,KAAM,SAAlDD,EA1B6E,SAAC,GAA0B,IAAzBE,EAAwB,EAAxBA,aAAa3B,EAAW,EAAXA,MAC/G,OACI,0BAAM4B,SAAUD,GACZ,6BACI,kBAAC,IAAD,CAAOf,YAAa,QAASC,KAAM,QAASE,UAAWL,IAChDO,SAAU,CAACC,QAEtB,6BACI,kBAAC,IAAD,CAAON,YAAa,WAAaC,KAAM,WAAYE,UAAWL,IAAOmB,KAAK,WACnEZ,SAAU,CAACC,QAEtB,6BACI,kBAAC,IAAD,CAAOH,UAAWL,IAAOG,KAAM,aAAcgB,KAAK,aADtD,gBAIC7B,GAAS,yBAAKG,UAAW2B,IAAMC,kBAC3B/B,GAEL,6BACI,8CA4BDgC,uBANO,SAACC,GAAD,MAA6C,CAC/DC,OAAQD,EAAME,KAAKD,OACnBE,QAASH,EAAME,KAAKC,WAIc,CAACC,WAAxBL,EApBmD,SAACzB,GAI/D,OAAIA,EAAM2B,OACC,kBAAC,IAAD,CAAUI,GAAI,aAElB,6BACH,qCACA,kBAACd,EAAD,CAAgBI,SARH,SAACW,GACdhC,EAAM8B,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASH,UAOzCA,QAAS7B,EAAM6B","file":"static/js/6.91e5f911.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2ON-w\",\"error\":\"FormControls_error__1EbmF\",\"formSummaryError\":\"FormControls_formSummaryError__1KPHr\"};","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../Utils/validators\";\r\n\r\ntype FormControlType={\r\n    meta:WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlType> = ({meta:{touched, error},children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>  <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export type FieldValidatorType=(value:string)=>string|undefined\r\n\r\nexport const required:FieldValidatorType=(value)=>{\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport  const maxLengthCreator=(maxLength:number): FieldValidatorType=>(value)=>{\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined\r\n}\r\n\r\nexport const minLength2:FieldValidatorType=(value)=>{\r\n    if (value && value.length<2) return 'Min length is 2 symbols';\r\n\r\n    return undefined\r\n}\r\n","import React from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormControls/FormControls\";\r\nimport {required} from \"../../Utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport style from './../common/FormControls/FormControls.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n\r\n}\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit,error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'} name={'email'} component={Input}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'}  name={'password'} component={Input} type=\"password\"\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field component={Input} name={'rememberMe'} type=\"checkbox\"\r\n                /> remember me\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\nconst Login: React.FC<MapDispatchPropsType & MapStatePropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n    </div>\r\n\r\n}\r\n\r\nconst mapStateProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    captcha: state.auth.captcha\r\n})\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateProps, {login})(Login)\r\n"],"sourceRoot":""}