{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Sidebar/Sidebar.module.css","components/Sidebar/Friends/Friends.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/wpapers.jpg","components/Profile/MyPosts/Post/post.module.css","components/Sidebar/Friends/Friend/friend.module.css","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profile_reducer.ts","components/Profile/MyPosts/Post/post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Navbar/Music/Music.tsx","components/Navbar/News/News.tsx","components/Navbar/Settings/Settings.jsx","components/Sidebar/Friends/Friend/friend.tsx","components/Sidebar/Friends/Friends.tsx","components/Sidebar/Sidebar.tsx","Redux/dialogs_reducer.ts","components/Dialogs/DialogItem/DialohItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","serviceWorker.js","Redux/sidebar_reducer.ts","Redux/redux-store.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","NavBar","nav","item","to","activeClassName","activeLink","active","ProfileInfo","image","road","descriptionBlock","initialState","posts","id","message","howManyLikes","newPostText","Post","props","MyPosts","postElements","profilePage","map","p","postBlock","value","onChange","e","currentTarget","addNewPostText","onClick","addPostCallback","MyPostsContainer","postText","store","dispatch","type","newPost","newText","addNewPostTextActionCreator","getState","Profile","Music","News","Settings","Friend","friend","img","name","Friends","friendsElements","sidebar","friends","f","friendsTitle","Sidebar","side","block","messages","newMessageText","dialogs","DialogItem","path","dialog","MessageItem","Dialogs","dialogsElements","dialogsPage","d","messageElements","m","dialogItems","onNewMessageChange","placeholder","onSendMessageClick","DialogsContainer","newMessage","messageBody","App","state","component","exact","render","Boolean","window","location","hostname","match","reducers","combineReducers","action","push","createStore","rerenderEntireTree","ReactDOM","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1d434930.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__8_Igp\",\"item\":\"Navbar_item__ulGPc\",\"activeLink\":\"Navbar_activeLink__2OwnW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__xFR2T\",\"dialog\":\"Dialogs_dialog__3YZMl\",\"message\":\"Dialogs_message__YR3GF\",\"messages\":\"Dialogs_messages__15RF7\",\"dialogItems\":\"Dialogs_dialogItems__1Hjf9\",\"active\":\"Dialogs_active__2z4cT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__UXf7B\",\"postBlock\":\"MyPosts_postBlock__1kfNr\",\"posts\":\"MyPosts_posts__nqRn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Z3h2x\",\"image\":\"ProfileInfo_image__1MsHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"side\":\"Sidebar_side__1hjtG\",\"block\":\"Sidebar_block__V4pkR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsTitle\":\"Friends_friendsTitle__2yVhr\",\"friends\":\"Friends_friends__3Y4_b\",\"activeLink\":\"Friends_activeLink__4BvA7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2tyyt\"};","module.exports = __webpack_public_path__ + \"static/media/wpapers.a1b97f4f.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__3KsPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"friend_friend__3Kb0e\"};","import React from \"react\";\r\nimport s from './Header.module.css'\r\n\r\nconst Header =()=> {\r\n\r\n  return  <header className={s.header}>\r\n        <img src='https://flosium.ru/imagehost/158/med_kak-razvivaetsya-cvetok-gerbery-v-domashnih-usloviyah.jpg'/>\r\n    </header>\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport road from './wpapers.jpg'\r\n\r\nconst ProfileInfo =()=> {\r\n\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <div className={s.image}>\r\n                <img src={road}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava+description\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default ProfileInfo;","import {addNewMessageActionCreator, addNewMessageTextActionCreator} from \"./dialogs_reducer\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\nexport type ActionsTypes = ReturnType<typeof addPostActionCreator> | ReturnType<typeof addNewPostTextActionCreator>\r\n    | ReturnType<typeof addNewMessageActionCreator> | ReturnType<typeof addNewMessageTextActionCreator>\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    howManyLikes: number\r\n}\r\n\r\nlet initialState = {\r\n        posts: [\r\n            {id: 1, message: 'Hi, how are you?', howManyLikes: 10},\r\n            {id: 2, message: 'It is my first post?', howManyLikes: 15}\r\n        ],\r\n        newPostText: ''\r\n    };\r\n\r\nexport const profileReducer = (state: ProfilePageType=initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            const newPost: PostsType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                howManyLikes: 0\r\n            };\r\n            state.posts.push(newPost)\r\n            state.newPostText = '';\r\n            return state;\r\n        case \"UPDATE-NEW-POST-TEXT\":\r\n            state.newPostText = action.newText;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let addPostActionCreator = (newPost: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPost: newPost\r\n    } as const\r\n\r\n}\r\nexport let addNewPostTextActionCreator = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    } as const\r\n}","import React from \"react\";\r\nimport s from './post.module.css'\r\nimport {PostsType} from \"../../../../Redux/store\";\r\n\r\nconst Post = (props: PostsType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://vignette.wikia.nocookie.net/lisenot/images/2/25/.jpg/revision/latest/scale-to-width-down/340?cb=20150514143502&path-prefix=ru\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.howManyLikes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/post'\r\nimport {ProfilePageType} from \"../../../Redux/store\";\r\n\r\ntype MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPostCallback: (postText: string) => void\r\n    addNewPostText: (newText: string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n    let postElements =\r\n        props.profilePage.posts.map(p => <Post id={p.id} message={p.message} howManyLikes={p.howManyLikes}/>)\r\n\r\n    const addPost = () => {\r\n        props.addPostCallback(props.profilePage.newPostText);\r\n    }\r\n    const newTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newPostText = e.currentTarget.value\r\n        props.addNewPostText(newPostText)\r\n    }\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <div className={s.nav}>\r\n            <div>\r\n                <textarea value={props.profilePage.newPostText}\r\n                          onChange={newTextChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button onClick={addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport {addNewPostTextActionCreator, addPostActionCreator} from \"../../../Redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {StoreType} from \"../../../Redux/redux-store\";\r\n\r\ntype MyPostsContainerType = {\r\n    store: StoreType\r\n}\r\n\r\nconst MyPostsContainer = (props: MyPostsContainerType) => {\r\n\r\n    const addPost = (postText: string) => {\r\n        props.store.dispatch(addPostActionCreator(postText));\r\n    }\r\n    const newTextChange = (newText: string) => {\r\n        props.store.dispatch(addNewPostTextActionCreator(newText));\r\n    }\r\n    return (<MyPosts\r\n        addPostCallback={addPost}\r\n        addNewPostText={newTextChange}\r\n        profilePage={props.store.getState().profilePage}\r\n    />)\r\n\r\n}\r\n\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {StoreType} from \"../../Redux/redux-store\";\r\n\r\ntype ProfilePropsType = {\r\n    store: StoreType\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <ProfileInfo/>\r\n            <div>\r\n                <MyPostsContainer\r\n                    store={props.store}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport s from './Music.module.css';\r\ntype MusicType={\r\n\r\n}\r\nconst Music=(props: MusicType)=>{\r\n    return(\r\n        <div className={s.Music}>Music</div>\r\n    )\r\n}\r\nexport default Music;","import React from \"react\";\r\n\r\nconst News=(props: any)=>{\r\n    return(\r\n        <div>News</div>\r\n    )\r\n}\r\nexport default News;","import React from \"react\";\r\n\r\nconst Settings=(props)=>{\r\n    return(\r\n        <div>Settings</div>\r\n    )\r\n}\r\nexport default Settings;\r\n","import React from \"react\";\r\nimport s from './friend.module.css'\r\nimport {FriendsType} from \"../../../../Redux/store\";\r\n\r\nconst Friend = (props: FriendsType) => {\r\n\r\n    return <div className={s.friend}>\r\n        <img src={props.img}/>\r\n        <span>{props.name}</span>\r\n    </div>\r\n\r\n\r\n}\r\nexport default Friend;\r\n","import React from \"react\";\r\nimport s from './Friends.module.css'\r\nimport {SidebarType} from \"../../../Redux/store\";\r\n\r\nimport Friend from \"./Friend/friend\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport type FriendsType = {\r\n    sidebar: SidebarType\r\n}\r\nconst Friends = (props: FriendsType) => {\r\n    let friendsElements = props.sidebar.friends.map(f => <NavLink to={`/profile/${f.id}`}><Friend id={f.id} name={f.name} img={f.img}/></NavLink>)\r\n    return (\r\n        <>\r\n            <h3 className={s.friendsTitle}>Friends</h3>\r\n            <div className={s.friends}>{friendsElements}</div>\r\n        </>\r\n\r\n\r\n    );\r\n}\r\nexport default Friends;\r\n","import React from \"react\";\r\nimport s from './Sidebar.module.css';\r\nimport Friends from \"./Friends/Friends\";\r\nimport {SidebarType} from \"../../Redux/store\";\r\n\r\nexport type MySidebarType={\r\n    sidebar: SidebarType\r\n}\r\nconst Sidebar = (props: MySidebarType) => {\r\n\r\n    return (\r\n        <nav className={s.side}>\r\n            <div className={s.block}>\r\n                <Friends\r\n                    sidebar={props.sidebar}\r\n                    />\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Sidebar;\r\n","import {addNewPostTextActionCreator, addPostActionCreator} from \"./profile_reducer\";\r\n\r\nexport type ActionsTypes = ReturnType<typeof addPostActionCreator> | ReturnType<typeof addNewPostTextActionCreator>\r\n    | ReturnType<typeof addNewMessageActionCreator> | ReturnType<typeof addNewMessageTextActionCreator>\r\n\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n    dialogs: Array<DialogsType>\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nlet initialState={\r\n        messages: [\r\n            {id: 1, message: 'Hello'},\r\n            {id: 2, message: 'How are you?'},\r\n            {id: 3, message: 'What do you do'},\r\n            {id: 4, message: 'My dog is the best friend'},\r\n            {id: 5, message: 'The best day!'}\r\n\r\n        ],\r\n        newMessageText: '',\r\n        dialogs: [\r\n            {\r\n                id: 1,\r\n                name: 'Lera',\r\n                img: 'https://www.sb.by/upload/resize_cache/slam.image/iblock/558/558ebd06b5552debf362edd774b92920.jpg'\r\n            },\r\n            {\r\n                id: 2,\r\n                name: 'Sasha',\r\n                img: 'https://i.pinimg.com/originals/8e/b0/fd/8eb0fdac7230089db2fa51f53e53397e.jpg'\r\n            },\r\n            {\r\n                id: 3,\r\n                name: 'Kesha',\r\n                img: 'https://www.belanta.vet/vet-blog/wp-content/uploads/2018/08/bulterer_07.jpg'\r\n            },\r\n            {\r\n                id: 4,\r\n                name: 'Dasha',\r\n                img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSNdbepu0Mk7TjGMAibWXRBh5Zn1lXAWFLtVg&usqp=CAU'\r\n            },\r\n            {\r\n                id: 5,\r\n                name: 'Pasha',\r\n                img: 'https://cameralabs.org/images/jamp/page/d07d78d2fbbd361944e4a80341a9931b_L.jpg'\r\n            }\r\n        ]\r\n    }\r\nexport const dialogsReducer = (state: DialogsPageType=initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case 'UPDATE-NEW-MESSAGE-TEXT':\r\n            state.newMessageText = action.newMessage\r\n            return state\r\n        case 'SEND-MESSAGE':\r\n            let messageBody = state.newMessageText;\r\n            state.newMessageText = '';\r\n            state.messages.push({id: 6, message: messageBody});\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport let addNewMessageTextActionCreator = (newMessage: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        newMessage: newMessage\r\n    } as const\r\n\r\n}\r\nexport let addNewMessageActionCreator = (messageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        messageBody: messageBody\r\n\r\n    } as const\r\n}\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType={\r\n    id: number\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props:DialogItemPropsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.img}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\ntype MessageItemType={\r\n    message:string\r\n}\r\n\r\nconst MessageItem = (props:MessageItemType) => {\r\n\r\n    return (\r\n\r\n            <div className={s.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n\r\n    )\r\n}\r\nexport default MessageItem;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialohItem\";\r\nimport MessageItem from \"./Messages/Messages\";\r\nimport {DialogsPageType} from \"../../Redux/store\";\r\n\r\ntype OneDialogsType = {\r\n    dialogsPage: DialogsPageType\r\n    onSendMessageClick: (newMessage: string) => void\r\n    onNewMessageChange: (messageBody: string) => void\r\n}\r\n\r\nconst Dialogs = (props: OneDialogsType) => {\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} img={d.img}/>)\r\n    let messageElements =\r\n        props.dialogsPage.messages.map(m => <MessageItem message={m.message}/>)\r\n    let newMessageText =\r\n        props.dialogsPage.newMessageText;\r\n    let onSend = () => {\r\n        props.onSendMessageClick(props.dialogsPage.newMessageText)\r\n    }\r\n    let onNewChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onNewMessageChange(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageText}\r\n                                   onChange={onNewChange}\r\n                                   placeholder='Enter your message'>\r\n                    </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSend}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.messages}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport {addNewMessageActionCreator, addNewMessageTextActionCreator} from \"../../Redux/dialogs_reducer\";\r\nimport {StoreType} from \"../../Redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\ntype DialogsContainerType = {\r\n    store: StoreType\r\n}\r\n\r\nconst DialogsContainer = (props: DialogsContainerType) => {\r\n    let onSend = (newMessage: string) => {\r\n        props.store.dispatch(addNewMessageActionCreator(newMessage));\r\n    }\r\n    let onNewChange = (messageBody: string) => {\r\n        props.store.dispatch(addNewMessageTextActionCreator(messageBody))\r\n    }\r\n    return (\r\n        <Dialogs\r\n            onSendMessageClick={onSend}\r\n            onNewMessageChange={onNewChange}\r\n            dialogsPage={props.store.getState().dialogsPage}\r\n        />\r\n    )\r\n}\r\n\r\nexport default DialogsContainer;\r\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport NavBar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Music from \"./components/Navbar/Music/Music\";\nimport News from \"./components/Navbar/News/News\";\nimport Settings from \"./components/Navbar/Settings/Settings\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport {StoreType} from \"./Redux/redux-store\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\ntype PropsType ={\n    store: StoreType\n}\n\nconst App = (props: PropsType) => {\n    let state=props.store.getState();\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <Header/>\n               <div className='navigation'>\n                <NavBar/>\n                <Sidebar sidebar={state.sidebar}/>\n               </div>\n                <div className='app-wrapper-content'>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/settings' component={Settings}/>\n                    <Route exact path='/dialogs' render={() => <DialogsContainer store={props.store}/>}/>\n                    <Route path='/profile' render={() => <Profile store={props.store}/>}/>\n                </div>\n            </div>\n        </BrowserRouter>)\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {addNewPostTextActionCreator, addPostActionCreator} from \"./profile_reducer\";\r\nimport {addNewMessageActionCreator, addNewMessageTextActionCreator} from \"./dialogs_reducer\";\r\nexport type ActionsTypes = ReturnType<typeof addPostActionCreator> | ReturnType<typeof addNewPostTextActionCreator>\r\n    | ReturnType<typeof addNewMessageActionCreator> | ReturnType<typeof addNewMessageTextActionCreator>\r\nexport type FriendsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\nlet initialState={\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: 'Lera',\r\n            img: 'https://hvost.news/upload/resize_cache/iblock/8b8/750_400_1/pochemu_kotenok_lizhet_volosy_i_zaryvaetsja_v_nih.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Nick',\r\n            img: 'https://irecommend.ru/sites/default/files/product-images/8170/x_1bfe8ccb.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Sasha',\r\n            img: 'https://cdn.iz.ru/sites/default/files/styles/1920x1080/public/article-2019-10/3_2.jpg?itok=490tTVov'\r\n        }\r\n    ],\r\n}\r\nexport const sidebarReducer=(state: SidebarType=initialState, action: ActionsTypes)=>{\r\n    return state\r\n}","import {combineReducers, createStore, Dispatch} from \"redux\";\r\nimport {ProfilePageType, profileReducer} from \"./profile_reducer\";\r\nimport {DialogsPageType, dialogsReducer} from \"./dialogs_reducer\";\r\nimport {sidebarReducer, SidebarType} from \"./sidebar_reducer\";\r\n\r\n\r\nexport type StoreType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: SidebarType\r\n    getState: () => AppStateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: Dispatch\r\n}\r\nlet reducers = combineReducers(\r\n    {\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        sidebar: sidebarReducer\r\n\r\n    }\r\n);\r\n\r\nlet store: StoreType = createStore(reducers);\r\nexport type AppStateType=ReturnType<typeof reducers>\r\n\r\nexport default store;","import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { BrowserRouter } from 'react-router-dom';\nimport store from \"./Redux/redux-store\";\n\n\nconst rerenderEntireTree=()=> {\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <App store={store}/>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n}\n\nrerenderEntireTree();\nstore.subscribe(rerenderEntireTree);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}