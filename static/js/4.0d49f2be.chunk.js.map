{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/common/FormControls/FormControls.tsx","Utils/validators.ts","components/Profile/ProfileInfo/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.module.css","components/common/Modal/Modal.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/common/Modal/Modal.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","minLength2","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","s","profileStatus","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","Modal","modal","setModal","finalModalClassName","style","active","finalModalContentClassName","modal_content","onClick","stopPropagation","ProfileData","profile","goToEditMode","isOwner","description","item","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","contactTitle","contactValue","edit","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","onSubmit","type","contact","formSummaryError","Contact","href","target","ProfileInfo","savePhoto","saveProfile","isModal","setIsModal","Preloader","container","descriptionBlock","image","src","photos","large","avatar1","changePhoto","id","files","htmlFor","customFileUpload","jsFileName","initialValues","formData","then","Post","React","memo","message","howManyLikes","MyPosts","postElements","profilePage","posts","p","postBlock","nav","AddPostReduxForm","addPostCallback","newPostText","maxLength10","Field","MyPostsContainer","connect","state","dispatch","addPost","Profile","console","log","ProfileContainer","userId","this","match","params","authorizedUserIs","history","push","getProfile","getStatus","refreshProfile","prevProps","prevState","profileContainer","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.0d49f2be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2ON-w\",\"error\":\"FormControls_error__1EbmF\",\"formSummaryError\":\"FormControls_formSummaryError__1KPHr\"};","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../Utils/validators\";\r\n\r\ntype FormControlType={\r\n    meta:WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlType> = ({meta:{touched, error},children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>  <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export type FieldValidatorType=(value:string)=>string|undefined\r\n\r\nexport const required:FieldValidatorType=(value)=>{\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport  const maxLengthCreator=(maxLength:number): FieldValidatorType=>(value)=>{\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined\r\n}\r\n\r\nexport const minLength2:FieldValidatorType=(value)=>{\r\n    if (value && value.length<2) return 'Min length is 2 symbols';\r\n\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__28vS3\",\"image\":\"ProfileInfo_image__2taE8\",\"description\":\"ProfileInfo_description__3B1ZG\",\"item\":\"ProfileInfo_item__2CGwY\",\"changePhoto\":\"ProfileInfo_changePhoto__3jtNi\",\"customFileUpload\":\"ProfileInfo_customFileUpload__1IrYy\",\"contact\":\"ProfileInfo_contact__2Z3h-\",\"edit\":\"ProfileInfo_edit__2IXzW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatus\":\"ProfileStatusWithHooks_profileStatus__2NXVN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2_HKt\",\"modal_content\":\"Modal_modal_content__3_FmA\",\"active\":\"Modal_active__X7Vnx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__UXf7B\",\"postBlock\":\"MyPosts_postBlock__1kfNr\",\"posts\":\"MyPosts_posts__nqRn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__3KsPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileContainer\":\"Profile_profileContainer__3J165\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from './ProfileStatusWithHooks.module.css'\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: PropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const acivateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deacivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileStatus}>\r\n            {!editMode &&\r\n            <div>\r\n               <b>Status:</b> <span onDoubleClick={acivateEditMode}>{props.status || 'My status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deacivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React, {FC} from 'react';\r\nimport style from './Modal.module.css'\r\n\r\n\r\ninterface ModalType {\r\n    modal: boolean\r\n    setModal: (value: boolean) => void\r\n}\r\n\r\n\r\nconst Modal: FC<ModalType> = ({modal, setModal, children}) => {\r\n    const finalModalClassName = `${style.modal} ${modal ? style.active : \"\"}`;\r\n    const finalModalContentClassName = `${style.modal_content} ${modal ? style.active : \"\"}`;\r\n    return (\r\n        <div className={finalModalClassName} onClick={ () => setModal(false)}>\r\n            <div className={finalModalContentClassName} onClick={e =>  e.stopPropagation()}>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;","import {ContactsType, ProfileType} from \"../../../../Redux/profile_reducer\";\r\nimport React from \"react\";\r\nimport s from \"../ProfileInfo/ProfileInfo.module.css\";\r\nimport {Contact} from \"../ProfileInfo/ProfileInfo\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    goToEditMode: () => void\r\n    isOwner: boolean\r\n}\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, goToEditMode, isOwner}) => {\r\n    return (\r\n        <div className={s.description}>\r\n            <div className={s.item}>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <b>Looking for a lob:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div className={s.item}>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div className={s.item}>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div className={s.item}>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key}\r\n                                    contactValue={profile.contacts[key as keyof ContactsType]}\r\n                    />\r\n                }\r\n            )}\r\n            </div>\r\n            {isOwner &&\r\n            <div className={s.edit}>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"../ProfileInfo/ProfileInfo.module.css\";\r\nimport style from \"../../../common/FormControls/FormControls.module.css\"\r\nimport {Contact} from \"../ProfileInfo/ProfileInfo\";\r\nimport {ContactsType, ProfileType} from \"../../../../Redux/profile_reducer\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormControls/FormControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nexport type ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType>\r\n    = ({profile, handleSubmit, error}) => {\r\n    return (\r\n        <form className={s.description} onSubmit={handleSubmit}>\r\n            <div className={s.item}>\r\n                <b>Full name:</b> {createField('Full name', 'fullName', [], Input)}\r\n            </div>\r\n\r\n            <div className={s.item}>\r\n                <b>Looking for a lob:</b>\r\n                {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div className={s.item}>\r\n                <b>My professional skills:</b>\r\n                {createField('My professional skills',\r\n                    'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n            <div className={s.item}>\r\n                <b>About me:</b>\r\n                {createField('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n            <div className={s.item}>\r\n                <b>Contacts:</b>{Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contact}>\r\n                        <b>{key}:</b>{createField(key, 'contacts.' + key, [], Textarea)}\r\n                    </div>\r\n\r\n                }\r\n            )}\r\n            </div>\r\n            <div className={s.edit}>\r\n                <button onClick={() => {\r\n                }}>Save\r\n                </button>\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>\r\n({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../../Redux/profile_reducer\";\r\nimport ProfileStatusWithHooks from \"../ProfileStatusWithHooks\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport avatar1 from \"../../../../assets/img/avatar1.png\";\r\nimport Modal from \"../../../common/Modal/Modal\";\r\nimport {ProfileData} from \"../ProfileData/ProfileData\";\r\nimport ProfileDataForm from \"../ProfileDataForm/ProfileDataForm\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n                                              isOwner,\r\n                                              profile,\r\n                                              status,\r\n                                              updateStatus,\r\n                                              savePhoto,\r\n                                              saveProfile\r\n                                          }) => {\r\n\r\n    const [isModal, setIsModal] = useState<boolean>(false)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.image}>\r\n                    <div onClick={() => setIsModal(true)}>\r\n                        <img src={profile.photos.large || avatar1}/>\r\n                    </div>\r\n                    <Modal modal={isModal} setModal={setIsModal}>\r\n\r\n                        <div className={s.changePhoto}>\r\n                            <div>\r\n                                {isOwner && <input type={'file'}\r\n                                                   id=\"file-upload\"\r\n                                                   onChange={mainPhotoSelected}/>}\r\n                                <label htmlFor=\"file-upload\" className={s.customFileUpload}>\r\n                                    <span className={s.jsFileName}>Upload a photo</span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                    </Modal>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} goToEditMode={() => setEditMode(true)} isOwner={isOwner}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            {(contactValue != \"\" && contactValue !=null) &&\r\n            <div className={s.contact}>\r\n\r\n                <b>{contactTitle}</b>:<a href={contactValue} target={'blank'}>{contactValue}</a>\r\n\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\";\r\nimport s from './post.module.css'\r\nimport {PostType} from \"../../../../Redux/profile_reducer\";\r\n\r\n\r\nconst Post = React.memo((props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://vignette.wikia.nocookie.net/lisenot/images/2/25/.jpg/revision/latest/scale-to-width-down/340?cb=20150514143502&path-prefix=ru\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.howManyLikes}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Post;\r\n","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/post'\r\nimport {ProfilePageType} from \"../../../Redux/profile_reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLength2, required} from \"../../../Utils/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\n\r\ntype MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPostCallback: (newPostText: string) => void\r\n\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    let postElements =\r\n        props.profilePage.posts.map(p => <Post id={p.id} message={p.message} howManyLikes={p.howManyLikes}/>)\r\n\r\n    const addNewPost = (value:any) => {\r\n        props.addPostCallback(value.newPostText)\r\n    }\r\n\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <div className={s.nav}>\r\n            <AddPostReduxForm onSubmit={addNewPost}/>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\nconst maxLength10=maxLengthCreator(10)\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'} component={Textarea} placeholder={'Post message'}\r\n                validate={[required, maxLength10, minLength2]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddPostForm)\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport {addPost} from \"../../../Redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\n\r\nlet mapStateToProps=(state: AppStateType)=>{\r\n    return{\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps=(dispatch: Dispatch)=> {\r\n    return {\r\n        addPostCallback: (newPostText:string) => {\r\n            dispatch(addPost(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/profile_reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto:(file: File) => void\r\n    saveProfile: (formData: ProfileType)=>Promise<any>\r\n}\r\nconst Profile = (props: ProfilePropsType) => {\r\n    console.log('profile')\r\n    return (\r\n        <div >\r\n            {props.profile && <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />}\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getProfile, getStatus, ProfileType, savePhoto, saveProfile, updateStatus} from \"../../Redux/profile_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport s from './Profile.module.css'\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserIs: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (formData: ProfileType)=>Promise<any>\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component <PropsType> {\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserIs\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId as number);\r\n        this.props.getStatus(userId as number);\r\n    }\r\n\r\n    componentDidMount() {\r\n       this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.profileContainer}>\r\n                <Profile\r\n                    {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserIs: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    /* withAuthRedirect*/\r\n    //не выбрасывает на логинизацию(удалить комент)\r\n)(ProfileContainer)\r\n\r\n\r\n/*\r\nlet AuthRedirectComponent=withAuthRedirect(ProfileContainer)\r\nconst WithUrlDataContainerComponent = withRouter(AuthRedirectComponent)\r\n\r\nexport default connect(mapStateToProps, {getProfile})(WithUrlDataContainerComponent);\r\n*/\r\n\r\n"],"sourceRoot":""}