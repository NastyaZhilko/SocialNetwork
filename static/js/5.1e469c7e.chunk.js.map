{"version":3,"sources":["components/common/FormControls/FormControls.module.css","components/common/FormControls/FormControls.tsx","Utils/validators.ts","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialohItem.tsx","components/Dialogs/Messages/Messages.tsx","HOC/WithAuthRedirect.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","minLength2","DialogItem","React","memo","path","id","s","dialog","src","img","to","MessageItem","message","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messageElements","messages","m","dialogItems","MessageReduxForm","onSubmit","onSendMessageClick","newMessageText","maxLength50","reduxForm","form","handleSubmit","Field","compose","dispatch","addNewMessage"],"mappings":"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","file":"static/js/5.1e469c7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2ON-w\",\"error\":\"FormControls_error__1EbmF\",\"formSummaryError\":\"FormControls_formSummaryError__1KPHr\"};","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../Utils/validators\";\r\n\r\ntype FormControlType={\r\n    meta:WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlType> = ({meta:{touched, error},children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n   const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>  <textarea {...input} {...restProps}/>\r\n    </FormControl>\r\n\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}>\r\n        <input {...input} {...restProps}/>\r\n    </FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export type FieldValidatorType=(value:string)=>string|undefined\r\n\r\nexport const required:FieldValidatorType=(value)=>{\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport  const maxLengthCreator=(maxLength:number): FieldValidatorType=>(value)=>{\r\n    if (value && value.length>maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined\r\n}\r\n\r\nexport const minLength2:FieldValidatorType=(value)=>{\r\n    if (value && value.length<2) return 'Min length is 2 symbols';\r\n\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__xFR2T\",\"dialog\":\"Dialogs_dialog__3YZMl\",\"message\":\"Dialogs_message__YR3GF\",\"messages\":\"Dialogs_messages__15RF7\",\"dialogItems\":\"Dialogs_dialogItems__1Hjf9\",\"active\":\"Dialogs_active__2z4cT\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType={\r\n    id: number\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem = React.memo((props:DialogItemPropsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.img}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n)\r\nexport default DialogItem;\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\ntype MessageItemType={\r\n    message:string\r\n}\r\n\r\nconst MessageItem = React.memo((props:MessageItemType) => {\r\n\r\n    return (\r\n\r\n            <div className={s.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n\r\n    )\r\n})\r\nexport default MessageItem;\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype PropsType={\r\n    isAuth:boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as PropsType)\r\n\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect <WP> (Component: React.ComponentType<WP>)  {\r\n\r\n    function RedirectComponent(props: PropsType & DispatchPropsType){\r\n        let {isAuth, ...restProps} = props\r\n            if (!props.isAuth) return  <Redirect to='/login'/>\r\n            return <Component {...restProps as WP}/>\r\n\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialohItem\";\r\nimport MessageItem from \"./Messages/Messages\";\r\nimport {DialogsPageType} from \"../../Redux/dialogs_reducer\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, minLength2, required} from \"../../Utils/validators\";\r\n\r\n\r\ntype OneDialogsType = {\r\n    dialogsPage: DialogsPageType\r\n    onSendMessageClick: (newMessage: string) => void\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nconst Dialogs = React.memo((props: OneDialogsType) => {\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} img={d.img}/>)\r\n    let messageElements =\r\n        props.dialogsPage.messages.map(m => <MessageItem message={m.message}/>)\r\n\r\n\r\n    let addNewMessage = (value:any) => {\r\n        props.onSendMessageClick(value.newMessageText)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <MessageReduxForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.messages}>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\nconst maxLength50=maxLengthCreator(50)\r\nconst MessageForm: React.FC<InjectedFormProps<FormDataType>> = (props)=> {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your message\"} name={'newMessageText'}\r\n                       component={Textarea}\r\n                validate={[required,maxLength50]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst MessageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(MessageForm)\r\n\r\nexport default withAuthRedirect(Dialogs);\r\n\r\n","import React from 'react';\r\nimport {addNewMessage} from \"../../Redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        onSendMessageClick: (newMessageText:string) => {\r\n            dispatch(addNewMessage(newMessageText))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}