{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Users/Users.module.css","components/Header/Header.module.css","components/Profile/ProfileInfo/wpapers.jpg","components/Profile/MyPosts/Post/post.module.css","components/Navbar/Navbar.module.css","assets/img/avatar1.png","components/Header/Header.tsx","components/Navbar/Navbar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","Redux/profile_reducer.ts","components/Profile/MyPosts/Post/post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Navbar/Music/Music.tsx","components/Navbar/News/News.tsx","components/Navbar/Settings/Settings.jsx","Redux/dialogs_reducer.ts","components/Dialogs/DialogItem/DialohItem.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","Redux/users_reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","App.tsx","serviceWorker.js","Redux/sidebar_reducer.ts","Redux/redux-store.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","NavBar","nav","item","to","activeClassName","activeLink","active","ProfileInfo","image","road","descriptionBlock","initialState","posts","id","message","howManyLikes","newPostText","Post","props","MyPosts","postElements","profilePage","map","p","postBlock","value","onChange","e","currentTarget","addNewPostText","onClick","addPostCallback","MyPostsContainer","connect","state","dispatch","type","newText","addNewPostTextActionCreator","Profile","Music","News","Settings","messages","newMessageText","dialogs","name","img","DialogItem","path","dialog","MessageItem","Dialogs","dialogsElements","dialogsPage","d","messageElements","m","dialogItems","onNewMessageChange","placeholder","onSendMessageClick","DialogsContainer","messageBody","addNewMessageTextActionCreator","users","pageSize","totalUsersCount","currentPage","Users","pagesCount","Math","ceil","pages","i","push","selectedPage","onPageChanged","usersPage","u","key","avatar","photos","small","avatar1","followed","unFollow","follow","status","UsersContainer","pageNumber","setCurrentPage","axios","get","then","response","setUsers","data","items","this","setTotalUsersCount","totalCount","React","Component","userId","followAC","unFollowAC","setUsersAC","count","App","component","render","Boolean","window","location","hostname","match","friends","reducers","combineReducers","action","newPost","sidebar","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d519ab3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__xFR2T\",\"dialog\":\"Dialogs_dialog__3YZMl\",\"message\":\"Dialogs_message__YR3GF\",\"messages\":\"Dialogs_messages__15RF7\",\"dialogItems\":\"Dialogs_dialogItems__1Hjf9\",\"active\":\"Dialogs_active__2z4cT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__UXf7B\",\"postBlock\":\"MyPosts_postBlock__1kfNr\",\"posts\":\"MyPosts_posts__nqRn6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Z3h2x\",\"image\":\"ProfileInfo_image__1MsHN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__3rKsv\",\"selectedPage\":\"Users_selectedPage__3jfWm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2tyyt\"};","module.exports = __webpack_public_path__ + \"static/media/wpapers.a1b97f4f.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__3KsPL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__8_Igp\",\"item\":\"Navbar_item__ulGPc\",\"activeLink\":\"Navbar_activeLink__2OwnW\"};","module.exports = __webpack_public_path__ + \"static/media/avatar1.498d600c.png\";","import React from \"react\";\r\nimport s from './Header.module.css'\r\n\r\nconst Header =()=> {\r\n\r\n  return  <header className={s.header}>\r\n        <img src='https://flosium.ru/imagehost/158/med_kak-razvivaetsya-cvetok-gerbery-v-domashnih-usloviyah.jpg'/>\r\n    </header>\r\n}\r\nexport default Header;\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to='/profile' activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.active}`}>\r\n                <NavLink to='/dialogs' activeClassName={s.activeLink}>Dialogs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/users' activeClassName={s.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/news' activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/music' activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/settings' activeClassName={s.activeLink}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport road from './wpapers.jpg'\r\n\r\nconst ProfileInfo =()=> {\r\n\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <div className={s.image}>\r\n                <img src={road}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava+description\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default ProfileInfo;","import {ActionsTypes} from \"./redux-store\";\r\n\r\nconst ADD_POST = 'ADD-POST';\r\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    howManyLikes: number\r\n}\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', howManyLikes: 10},\r\n        {id: 2, message: 'It is my first post?', howManyLikes: 15}\r\n    ],\r\n    newPostText: 'New post'\r\n};\r\n\r\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            const newPost: PostsType = {\r\n                id: 3,\r\n                message: state.newPostText,\r\n                howManyLikes: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                newPostText: ''\r\n            }\r\n\r\n        case \"UPDATE-NEW-POST-TEXT\":\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport let addPostActionCreator = () => {\r\n    return {\r\n        type: ADD_POST\r\n    } as const\r\n}\r\n\r\nexport let addNewPostTextActionCreator = (newText: string) => {\r\n    return {\r\n        type: UPDATE_NEW_POST_TEXT,\r\n        newText: newText\r\n    } as const\r\n}","import React from \"react\";\r\nimport s from './post.module.css'\r\nimport {PostsType} from \"../../../../Redux/store\";\r\n\r\nconst Post = (props: PostsType) => {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://vignette.wikia.nocookie.net/lisenot/images/2/25/.jpg/revision/latest/scale-to-width-down/340?cb=20150514143502&path-prefix=ru\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.howManyLikes}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/post'\r\nimport {ProfilePageType} from \"../../../Redux/store\";\r\n\r\ntype MyPostsType = {\r\n    profilePage: ProfilePageType\r\n    addPostCallback: (postText: string) => void\r\n    addNewPostText: (newText: string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n    let postElements =\r\n        props.profilePage.posts.map(p => <Post id={p.id} message={p.message} howManyLikes={p.howManyLikes}/>)\r\n\r\n    const addPost = () => {\r\n        props.addPostCallback(props.profilePage.newPostText);\r\n    }\r\n    const newTextChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let newPostText = e.currentTarget.value\r\n        props.addNewPostText(newPostText)\r\n    }\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <div className={s.nav}>\r\n            <div>\r\n                <textarea value={props.profilePage.newPostText}\r\n                          onChange={newTextChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button onClick={addPost}>Add post</button>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postElements}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport {addNewPostTextActionCreator, addPostActionCreator} from \"../../../Redux/profile_reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {StoreType} from \"../../../Redux/redux-store\";\r\n\r\nlet mapStateToProps=(state: StoreType)=>{\r\n    return{\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps=(dispatch: Dispatch)=> {\r\n    return {\r\n        addPostCallback: () => {\r\n            dispatch(addPostActionCreator())\r\n        },\r\n        addNewPostText: (newText: string) => {\r\n            dispatch(addNewPostTextActionCreator(newText));\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer=connect(mapStateToProps,mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className='app-wrapper-content'>\r\n            <ProfileInfo/>\r\n            <div>\r\n                <MyPostsContainer/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport s from './Music.module.css';\r\ntype MusicType={\r\n\r\n}\r\nconst Music=(props: MusicType)=>{\r\n    return(\r\n        <div className={s.Music}>Music</div>\r\n    )\r\n}\r\nexport default Music;","import React from \"react\";\r\n\r\nconst News=(props: any)=>{\r\n    return(\r\n        <div>News</div>\r\n    )\r\n}\r\nexport default News;","import React from \"react\";\r\n\r\nconst Settings=(props)=>{\r\n    return(\r\n        <div>Settings</div>\r\n    )\r\n}\r\nexport default Settings;\r\n","import {ActionsTypes} from \"./redux-store\";\r\n\r\n\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\nconst SEND_MESSAGE = 'SEND-MESSAGE';\r\nexport type DialogsPageType = {\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n    dialogs: Array<DialogsType>\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'What do you do'},\r\n        {id: 4, message: 'My dog is the best friend'},\r\n        {id: 5, message: 'The best day!'}\r\n\r\n    ],\r\n    newMessageText: '',\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Lera',\r\n            img: 'https://www.sb.by/upload/resize_cache/slam.image/iblock/558/558ebd06b5552debf362edd774b92920.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Sasha',\r\n            img: 'https://i.pinimg.com/originals/8e/b0/fd/8eb0fdac7230089db2fa51f53e53397e.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Kesha',\r\n            img: 'https://www.belanta.vet/vet-blog/wp-content/uploads/2018/08/bulterer_07.jpg'\r\n        },\r\n        {\r\n            id: 4,\r\n            name: 'Dasha',\r\n            img: 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSNdbepu0Mk7TjGMAibWXRBh5Zn1lXAWFLtVg&usqp=CAU'\r\n        },\r\n        {\r\n            id: 5,\r\n            name: 'Pasha',\r\n            img: 'https://cameralabs.org/images/jamp/page/d07d78d2fbbd361944e4a80341a9931b_L.jpg'\r\n        }\r\n    ]\r\n}\r\nexport const dialogsReducer = (state: DialogsPageType = initialState, action: ActionsTypes):DialogsPageType => {\r\n\r\n    switch (action.type) {\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {...state, newMessageText:action.messageBody}\r\n\r\n\r\n        case SEND_MESSAGE:\r\n            let messageBody = state.newMessageText;\r\n            return {\r\n                ...state,\r\n                newMessageText: '',\r\n                messages: [...state.messages, {id: 6, message: messageBody}]\r\n            };\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport let addNewMessageTextActionCreator = (messageBody: string) => {\r\n    return {\r\n        type: UPDATE_NEW_MESSAGE_TEXT,\r\n        messageBody: messageBody\r\n    } as const\r\n}\r\n\r\nexport let addNewMessageActionCreator = () => {\r\n    return {\r\n        type: SEND_MESSAGE\r\n    } as const\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType={\r\n    id: number\r\n    img: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props:DialogItemPropsType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src={props.img}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\ntype MessageItemType={\r\n    message:string\r\n}\r\n\r\nconst MessageItem = (props:MessageItemType) => {\r\n\r\n    return (\r\n\r\n            <div className={s.message}>\r\n                {props.message}\r\n            </div>\r\n\r\n\r\n    )\r\n}\r\nexport default MessageItem;\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialohItem\";\r\nimport MessageItem from \"./Messages/Messages\";\r\nimport {DialogsPageType} from \"../../Redux/store\";\r\n\r\ntype OneDialogsType = {\r\n    dialogsPage: DialogsPageType\r\n    onSendMessageClick: (newMessage: string) => void\r\n    onNewMessageChange: (messageBody: string) => void\r\n}\r\n\r\nconst Dialogs = (props: OneDialogsType) => {\r\n    let dialogsElements =\r\n        props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} id={d.id} img={d.img}/>)\r\n    let messageElements =\r\n        props.dialogsPage.messages.map(m => <MessageItem message={m.message}/>)\r\n    let newMessageText =\r\n        props.dialogsPage.newMessageText;\r\n    let onSend = () => {\r\n        props.onSendMessageClick(props.dialogsPage.newMessageText)\r\n    }\r\n    let onNewChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.onNewMessageChange(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                    <div><textarea value={newMessageText}\r\n                                   onChange={onNewChange}\r\n                                   placeholder='Enter your message'>\r\n                    </textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSend}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.messages}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport {addNewMessageActionCreator, addNewMessageTextActionCreator} from \"../../Redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {StateType} from \"../../Redux/store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        onSendMessageClick: () => {\r\n            dispatch(addNewMessageActionCreator())\r\n        },\r\n        onNewMessageChange: (messageBody: string) => {\r\n            dispatch(addNewMessageTextActionCreator(messageBody))\r\n        }\r\n    }\r\n}\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\nexport default DialogsContainer;\r\n","import {ActionsTypes} from \"./redux-store\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS'\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\nconst SET_TOTAL_USERS_COUNT='SET-TOTAL-USERS-COUNT'\r\nexport type PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UsersType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotosType\r\n    status: string\r\n    followed: boolean\r\n}\r\nexport type UsersPageType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n}\r\nlet initialState: UsersPageType= {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1\r\n}\r\nexport const usersReducers = (state: UsersPageType = initialState, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followAC = (userId: number) => {\r\n    return {type: FOLLOW, userId} as const\r\n}\r\nexport const unFollowAC = (userId: number) => {\r\n    return {type: UNFOLLOW, userId} as const\r\n}\r\nexport const setUsersAC = (users: Array<UsersType>) => {\r\n    return {type: SET_USERS, users} as const\r\n}\r\nexport const setCurrentPageAC = (currentPage: number) => {\r\n    return {type: SET_CURRENT_PAGE, currentPage} as const\r\n}\r\nexport const setTotalUsersCountAC = (totalUsersCount: number) => {\r\n        return {type: SET_TOTAL_USERS_COUNT, count:totalUsersCount} as const\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from \"./Users.module.css\";\r\nimport avatar1 from \"../../assets/img/avatar1.png\";\r\nimport {UsersType} from \"../../Redux/users_reducer\";\r\n\r\nexport type UsersPropsType = {\r\n    follow: (userId: number) => void,\r\n    unFollow: (userId: number) => void,\r\n    //setUsers: (users: Array<UsersType>) => void,\r\n    usersPage: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    //setCurrentPage: (currentPage: number) => void\r\n    //setTotalUsersCount: (totalUsers: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\nlet Users = (props: UsersPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount/props.pageSize)\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    return <div>\r\n        <div>\r\n            {pages.map(p => {\r\n                return <span className={props.currentPage === p ? s.selectedPage :'' }\r\n                             onClick={() => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.usersPage.map(u => <div key={u.id}>\r\n               <span>\r\n                   <div>\r\n                       <img className={s.avatar} src={u.photos.small != null ? u.photos.small : avatar1}/>\r\n                   </div>\r\n                   <div>\r\n                       {u.followed\r\n                           ? <button onClick={() => {\r\n                               props.unFollow(u.id)\r\n                           }}>Unfollow</button>\r\n                           : <button onClick={() => {\r\n                               props.follow(u.id)\r\n                           }}>Follow</button>}\r\n                   </div>\r\n               </span>\r\n                <span>\r\n                   <span>\r\n                       <div>{u.name}</div><div>{u.status}</div>\r\n                   </span>\r\n                   <span>\r\n                        <div>{\"location.country\"}</div>\r\n                       <div>{\"location.city\"}</div>\r\n                   </span>\r\n               </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\nexport default Users;","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../Redux/redux-store\";\r\nimport {\r\n    followAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    unFollowAC,\r\n    UsersType\r\n} from \"../../Redux/users_reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport Users from \"./Users\";\r\nimport axios from \"axios\";\r\n\r\ntype ResponseType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: null\r\n}\r\n\r\nexport type UsersContainerPropsType={\r\n    follow: (userId: number) => void,\r\n    unFollow: (userId: number) => void,\r\n    setUsers: (users: Array<UsersType>) => void,\r\n    usersPage: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    setCurrentPage: (currentPage: number) => void\r\n    setTotalUsersCount: (totalUsers: number) => void\r\n}\r\n\r\nexport class UsersContainer extends React.Component<UsersContainerPropsType> {\r\n    componentDidMount() {\r\n        axios.get<ResponseType>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items)\r\n                this.props.setTotalUsersCount(response.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        axios.get<ResponseType>(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\r\n            .then(response => {\r\n                this.props.setUsers(response.data.items)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <Users\r\n            follow={this.props.follow}\r\n            unFollow={this.props.unFollow}\r\n            //setUsers={this.props.setUsers}\r\n            usersPage={this.props.usersPage}\r\n            pageSize={this.props.pageSize}\r\n            totalUsersCount={this.props.totalUsersCount}\r\n            currentPage={this.props.currentPage}\r\n            //setCurrentPage={this.props.setCurrentPage}\r\n            //setTotalUsersCount={this.props.setTotalUsersCount}\r\n            onPageChanged={this.onPageChanged}\r\n        />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: StoreType) => {\r\n    return {\r\n        usersPage: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage\r\n    }\r\n\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(followAC(userId))\r\n        },\r\n        unFollow: (userId: number) => {\r\n            dispatch(unFollowAC(userId))\r\n        },\r\n        setUsers: (users: Array<UsersType>) => {\r\n            dispatch(setUsersAC(users))\r\n        },\r\n        setCurrentPage: (pageNumber: number) => {\r\n            dispatch(setCurrentPageAC(pageNumber))\r\n        },\r\n        setTotalUsersCount: (totalCount: number) => {\r\n            dispatch(setTotalUsersCountAC(totalCount))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer)","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport NavBar from \"./components/Navbar/Navbar\";\nimport Profile from \"./components/Profile/Profile\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Music from \"./components/Navbar/Music/Music\";\nimport News from \"./components/Navbar/News/News\";\nimport Settings from \"./components/Navbar/Settings/Settings\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\n\nconst App = () => {\n\n    return (\n        <BrowserRouter>\n            <div className='app-wrapper'>\n                <Header/>\n                <div className='navigation'>\n                    <NavBar/>\n                    {/*<Sidebar />*/}\n                </div>\n                <div className='app-wrapper-content'>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/news' component={News}/>\n                    <Route path='/settings' component={Settings}/>\n\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n                    <Route path='/profile' render={() => <Profile/>}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                </div>\n            </div>\n        </BrowserRouter>)\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {addNewPostTextActionCreator, addPostActionCreator} from \"./profile_reducer\";\r\nimport {addNewMessageActionCreator, addNewMessageTextActionCreator} from \"./dialogs_reducer\";\r\nexport type ActionsTypes = ReturnType<typeof addPostActionCreator> | ReturnType<typeof addNewPostTextActionCreator>\r\n    | ReturnType<typeof addNewMessageActionCreator> | ReturnType<typeof addNewMessageTextActionCreator>\r\nexport type FriendsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nexport type SidebarType = {\r\n    friends: Array<FriendsType>\r\n}\r\nlet initialState={\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: 'Lera',\r\n            img: 'https://hvost.news/upload/resize_cache/iblock/8b8/750_400_1/pochemu_kotenok_lizhet_volosy_i_zaryvaetsja_v_nih.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Nick',\r\n            img: 'https://irecommend.ru/sites/default/files/product-images/8170/x_1bfe8ccb.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Sasha',\r\n            img: 'https://cdn.iz.ru/sites/default/files/styles/1920x1080/public/article-2019-10/3_2.jpg?itok=490tTVov'\r\n        }\r\n    ],\r\n}\r\nexport const sidebarReducer=(state: SidebarType=initialState, action: ActionsTypes)=>{\r\n    return state\r\n}","import {combineReducers, createStore, Dispatch, Store} from \"redux\";\r\nimport {addNewPostTextActionCreator, addPostActionCreator, ProfilePageType, profileReducer} from \"./profile_reducer\";\r\nimport {sidebarReducer, SidebarType} from \"./sidebar_reducer\";\r\nimport {\r\n    addNewMessageActionCreator,\r\n    addNewMessageTextActionCreator,\r\n    DialogsPageType,\r\n    dialogsReducer\r\n} from \"./dialogs_reducer\";\r\nimport {\r\n    followAC,\r\n    setCurrentPageAC,\r\n    setTotalUsersCountAC,\r\n    setUsersAC,\r\n    unFollowAC,\r\n    UsersPageType,\r\n    usersReducers\r\n} from \"./users_reducer\";\r\n\r\n\r\nexport type ActionsTypes =\r\n    ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof addNewPostTextActionCreator>\r\n    | ReturnType<typeof addNewMessageActionCreator>\r\n    | ReturnType<typeof addNewMessageTextActionCreator>\r\n    | ReturnType<typeof followAC>\r\n    | ReturnType<typeof unFollowAC>\r\n    | ReturnType<typeof setUsersAC>\r\n    | ReturnType<typeof setCurrentPageAC>\r\n    | ReturnType<typeof setTotalUsersCountAC>\r\n\r\n\r\nexport type StoreType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n    sidebar: SidebarType\r\n    usersPage: UsersPageType\r\n    getState: () => AppStateType\r\n    subscribe: (observer: () => void) => void\r\n    dispatch: Dispatch\r\n}\r\nlet reducers = combineReducers(\r\n    {\r\n        profilePage: profileReducer,\r\n        dialogsPage: dialogsReducer,\r\n        sidebar: sidebarReducer,\r\n        usersPage: usersReducers\r\n    }\r\n);\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\nexport let store: Store = createStore(reducers);\r\n\r\ntype Window = typeof window & { store: Store }\r\n(window as Window).store = store;\r\nexport default store;","import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/redux-store\";\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider\n               store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}